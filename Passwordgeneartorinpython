
=======
import tkinter as tk

from tkinter import messagebox
=======

from tkinter import messagebox
=======
from tkinter import messagebox, filedialog


import random

import string
import secrets  # More secure than random
from typing import Tuple

try:
    import pyperclip
    clipboard_available = True
except ImportError:
    clipboard_available = False


def get_password_length() -> int:
    """Prompt user for password length between 8 and 32."""
    while True:
        try:
            length = int(input("Enter password length (8-32): "))
            if 8 <= length <= 32:
                return length
            print("Length should be between 8 and 32.")
        except ValueError:
            print("Enter a valid number.")


def choose_characters() -> Tuple[str, list]:
    """Ask user which character sets to include and return combined pool + list of chosen sets."""
    print("\nChoose character types to include in your password:")
    include_upper = input("Include uppercase letters? (y/n): ").lower() == "y"
    include_lower = input("Include lowercase letters? (y/n): ").lower() == "y"
    include_digits = input("Include digits? (y/n): ").lower() == "y"
    include_symbols = input("Include symbols? (y/n): ").lower() == "y"

    if not (include_upper or include_lower or include_digits or include_symbols):
        print("You must select at least one character type!")
        return choose_characters()

    chosen_sets = []
    chars = ""
    if include_upper:
        chosen_sets.append(string.ascii_uppercase)
        chars += string.ascii_uppercase
    if include_lower:
        chosen_sets.append(string.ascii_lowercase)
        chars += string.ascii_lowercase
    if include_digits:
        chosen_sets.append(string.digits)
        chars += string.digits
    if include_symbols:
        chosen_sets.append(string.punctuation)
        chars += string.punctuation

    return chars, chosen_sets


def evaluate_strength(password: str) -> str:
    """Evaluate password strength based on length and diversity of characters."""
    length = len(password)
    score = 0

    if any(c.islower() for c in password): score += 1
    if any(c.isupper() for c in password): score += 1
    if any(c.isdigit() for c in password): score += 1
    if any(c in string.punctuation for c in password): score += 1

    if length >= 16 and score >= 3:
        return "Very Strong"
    elif length >= 12 and score >= 3:
        return "Strong"
    elif length >= 10 and score >= 2:
        return "Moderate"
    else:
        return "Weak"


def generate_password() -> str:
    """Generate a secure password including at least one character from each selected set."""
    print("\n--- Password Generator ---")
    length = get_password_length()
    chars, chosen_sets = choose_characters()

    # Ensure all chosen categories are represented at least once
    password = [secrets.choice(charset) for charset in chosen_sets]

    # Fill the rest of the password
    while len(password) < length:
        password.append(secrets.choice(chars))

    # Shuffle result securely
    secrets.SystemRandom().shuffle(password)
    result = "".join(password)

    print(f"\nGenerated Password: {result}")
    print(f"Password Strength: {evaluate_strength(result)}")

    if clipboard_available:
        pyperclip.copy(result)
        print("Password copied to clipboard!")

    # Ask user if they want to save
    save = input("Save this password to a file? (y/n): ").lower()
    if save == "y":
        with open("saved_passwords.txt", "a") as f:
            f.write(result + "\n")
        print("Password saved to 'saved_passwords.txt'.")

    return result


def main() -> None:
    """Main loop for password generator."""
    print("Welcome to the Secure Password Generator!\n")
    while True:
        generate_password()
        again = input("\nGenerate another password? (y/n): ").lower()
        if again != "y":
            print("Goodbye!")
            break


=======
try:
    import pyperclip
    clipboard_available = True
except ImportError:
    clipboard_available = False


def evaluate_strength(password):
    length = len(password)
    categories = sum([
        any(c.islower() for c in password),
        any(c.isupper() for c in password),
        any(c.isdigit() for c in password),
        any(c in string.punctuation for c in password)
    ])
    
    if length >= 12 and categories >= 3:
        return "Strong"
    elif length >= 10 and categories >= 2:
        return "Moderate"
    else:
        return "Weak"

def generate_password():
    try:
        length = int(length_entry.get())
        if length < 8 or length > 32:
            messagebox.showerror("Error", "Length should be between 8 and 32.")
            return
    except ValueError:
        messagebox.showerror("Error", "Enter a valid number for length.")
=======

AMBIGUOUS = "O0l1I"

def evaluate_strength(password):
    length = len(password)
    categories = sum([
        any(c.islower() for c in password),
        any(c.isupper() for c in password),
        any(c.isdigit() for c in password),
        any(c in string.punctuation for c in password)
    ])
    
    if length >= 12 and categories >= 3:
        return "Strong"
    elif length >= 10 and categories >= 2:
        return "Moderate"
    else:
        return "Weak"


=======
def get_color(strength):
    if strength == "Strong":
        return "green"
    elif strength == "Moderate":
        return "orange"
    else:
        return "red"


def generate_passwords():
    try:
        length = int(length_entry.get())
        count = int(count_entry.get())
        if length < 8 or length > 32 or count < 1:
            messagebox.showerror("Error", "Length 8-32, Count >=1")
            return
    except ValueError:
        messagebox.showerror("Error", "Enter valid numbers")

        return
    
    chars = ""
    if upper_var.get(): chars += string.ascii_uppercase
    if lower_var.get(): chars += string.ascii_lowercase
    if digits_var.get(): chars += string.digits
    if symbols_var.get(): chars += string.punctuation
    

=======
    if exclude_var.get():
        chars = ''.join(c for c in chars if c not in AMBIGUOUS)
    

    if not chars:
        messagebox.showerror("Error", "Select at least one character type!")
        return
    

    password = "".join(random.choice(chars) for _ in range(length))
    password_entry.delete(0, tk.END)
    password_entry.insert(0, password)
    
    strength_label.config(text=f"Strength: {evaluate_strength(password)}")
    
    if clipboard_available:
        pyperclip.copy(password)

# GUI Setup
root = tk.Tk()
root.title("Enhanced Password Generator")
root.geometry("400x300")
root.resizable(False, False)

tk.Label(root, text="Password Length (8-32):").pack(pady=5)
=======

    password_list.delete(0, tk.END)
    for _ in range(count):
        password = "".join(random.choice(chars) for _ in range(length))
        password_list.insert(tk.END, f"{password}  ({evaluate_strength(password)})")
    
    if clipboard_available:
        pyperclip.copy(password_list.get(0))

def generate_strong_password():
    length_entry.delete(0, tk.END)
    length_entry.insert(0, "16")
    upper_var.set(True)
    lower_var.set(True)
    digits_var.set(True)
    symbols_var.set(True)
    exclude_var.set(True)
    count_entry.delete(0, tk.END)
    count_entry.insert(0, "1")
    generate_passwords()

# GUI Setup
root = tk.Tk()
root.title("Advanced Password Generator")
root.geometry("500x450")
root.resizable(False, False)

tk.Label(root, text="Password Length (8-32):").pack(pady=2)
length_entry = tk.Entry(root)
length_entry.pack()
length_entry.insert(0, "12")

tk.Label(root, text="Number of Passwords:").pack(pady=2)
count_entry = tk.Entry(root)
count_entry.pack()
count_entry.insert(0, "1")

upper_var = tk.BooleanVar(value=True)
lower_var = tk.BooleanVar(value=True)
digits_var = tk.BooleanVar(value=True)
symbols_var = tk.BooleanVar(value=True)
exclude_var = tk.BooleanVar(value=False)

tk.Checkbutton(root, text="Include Uppercase", variable=upper_var).pack(anchor='w')
tk.Checkbutton(root, text="Include Lowercase", variable=lower_var).pack(anchor='w')
tk.Checkbutton(root, text="Include Digits", variable=digits_var).pack(anchor='w')
tk.Checkbutton(root, text="Include Symbols", variable=symbols_var).pack(anchor='w')
tk.Checkbutton(root, text="Exclude Ambiguous Characters (O0l1I)", variable=exclude_var).pack(anchor='w')

tk.Button(root, text="Generate Password(s)", command=generate_passwords).pack(pady=5)
tk.Button(root, text="Generate Strong Password (Recommended)", command=generate_strong_password).pack(pady=5)

password_list = tk.Listbox(root, width=60)
password_list.pack(pady=5)

tk.Button(root, text="Copy Selected to Clipboard", command=lambda: pyperclip.copy(password_list.get(tk.ACTIVE)) if clipboard_available else None).pack(pady=5)

=======
    for _ in range(count):
        password = "".join(random.choice(chars) for _ in range(length))
        strength = evaluate_strength(password)
        password_list.insert(tk.END, password)
        password_list.itemconfig(tk.END, {'fg': get_color(strength)})
    
    if clipboard_available:
        pyperclip.copy(password_list.get(tk.END))

def generate_strong_password():
    length_entry.delete(0, tk.END)
    length_entry.insert(0, "16")
    upper_var.set(True)
    lower_var.set(True)
    digits_var.set(True)
    symbols_var.set(True)
    exclude_var.set(True)
    count_entry.delete(0, tk.END)
    count_entry.insert(0, "1")
    generate_passwords()

def copy_selected():
    if password_list.curselection():
        password = password_list.get(password_list.curselection())
        if clipboard_available:
            pyperclip.copy(password)
            messagebox.showinfo("Copied", "Password copied to clipboard!")
        else:
            messagebox.showinfo("Clipboard Unavailable", "Install pyperclip for clipboard functionality.")

def save_to_file():
    if password_list.size() == 0:
        messagebox.showwarning("Warning", "No passwords to save!")
        return
    file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                             filetypes=[("Text files", "*.txt")])
    if file_path:
        with open(file_path, "w") as f:
            for i in range(password_list.size()):
                f.write(password_list.get(i) + "\n")
        messagebox.showinfo("Saved", f"Passwords saved to {file_path}")

# GUI Setup
root = tk.Tk()
root.title("Professional Password Generator & Manager")
root.geometry("600x500")
root.resizable(False, False)

tk.Label(root, text="Password Length (8-32):").pack(pady=2)

length_entry = tk.Entry(root)
length_entry.pack()
length_entry.insert(0, "12")


=======
tk.Label(root, text="Number of Passwords:").pack(pady=2)
count_entry = tk.Entry(root)
count_entry.pack()
count_entry.insert(0, "1")


upper_var = tk.BooleanVar(value=True)
lower_var = tk.BooleanVar(value=True)
digits_var = tk.BooleanVar(value=True)
symbols_var = tk.BooleanVar(value=True)

=======
exclude_var = tk.BooleanVar(value=False)


tk.Checkbutton(root, text="Include Uppercase", variable=upper_var).pack(anchor='w')
tk.Checkbutton(root, text="Include Lowercase", variable=lower_var).pack(anchor='w')
tk.Checkbutton(root, text="Include Digits", variable=digits_var).pack(anchor='w')
tk.Checkbutton(root, text="Include Symbols", variable=symbols_var).pack(anchor='w')


tk.Button(root, text="Generate Password", command=generate_password).pack(pady=10)

password_entry = tk.Entry(root, width=30, font=("Arial", 12))
password_entry.pack(pady=5)

strength_label = tk.Label(root, text="Strength: ")
strength_label.pack(pady=5)

tk.Button(root, text="Copy to Clipboard", command=lambda: pyperclip.copy(password_entry.get()) if clipboard_available else None).pack()
=======
tk.Checkbutton(root, text="Exclude Ambiguous Characters (O0l1I)", variable=exclude_var).pack(anchor='w')

tk.Button(root, text="Generate Password(s)", command=generate_passwords).pack(pady=5)
tk.Button(root, text="Generate Strong Password (Recommended)", command=generate_strong_password).pack(pady=5)

password_list = tk.Listbox(root, width=70, height=15)
password_list.pack(pady=5)

tk.Button(root, text="Copy Selected to Clipboard", command=copy_selected).pack(pady=3)
tk.Button(root, text="Save All Passwords to File", command=save_to_file).pack(pady=3)




root.mainloop()
